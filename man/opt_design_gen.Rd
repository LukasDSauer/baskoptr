% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/opt_bask.R
\name{opt_design_gen}
\alias{opt_design_gen}
\title{Optimize a Basket Trial Design}
\usage{
opt_design_gen(
  design,
  utility,
  algorithm,
  detail_params,
  utility_params,
  algorithm_params,
  trace = TRUE
)
}
\arguments{
\item{design}{An object of class \code{Basket} created by the function
\code{baskexact::setupOneStageBasket}.}

\item{utility}{A function returning the utility of a parameter combination
\code{x}, of the form \code{utility(design, x, detail_params, ...)}, where \code{...} may
further parameters to be supplied to the utility.}

\item{algorithm}{A function returning the optimization algorithm's results,
should have the form \code{algorithm(fun, trace, ...)}, where \code{fun} is the
function to be optimized, \code{trace} is a logical for requesting algorithm
trace, and \code{...} may be further parameters of the optimization algorithm.}

\item{detail_params}{A named list of parameters that need to be supplied to
\code{baskexact::toer()} and \code{baskexact::pow()}.}

\item{utility_params}{A named list of further parameters that need to be
supplied to  the utility function.}

\item{algorithm_params}{A named list of further parameters that need to be
supplied to the optimization algorithm.}

\item{trace}{A logical, should the trace of the optimization algorithm be
returned?}
}
\value{
a list consisting of the optimization result vector, the optimal
utility value, and the trace of the optimization algorithm
}
\description{
Optimize the parameters of a basket trial design using a utility-based
approach with a simulation algorithm of your choice.
}
\examples{
design <- setupOneStageBasket(k = 3, shape1 = 1, shape2 = 1, p0 = 0.2)
opt_design_gen(design = design,
               utility = u_ewp_discont,
               algorithm = optimizr::simann,
               detail_params = list(p1 = c(0.5, 0.2, 0.2),
                                   n = 20,
                                   weight_fun = weights_fujikawa,
                                   logbase = exp(1)),
               utility_params = list(thresh = 0.05),
               algorithm_params = list(par = c(lambda = 0.99,
                                                    epsilon = 2,
                                                    tau = 0.5),
                                       lower = c(lambda = 0.001,
                                                    epsilon = 1,
                                                    tau = 0.001),
                                       upper = c(lambda = 0.999,
                                                 epsilon = 10,
                                                 tau = 0.999),
                                       control = list(maxit = 10000,
                                                      temp = 2000,
                                                      fnscale = -1)))
opt_design_gen(design = design,
               utility = u_powfwer_discont_bound,
               algorithm = stats_optim_sann,
               detail_params = list(n = 20, p1 = c(0.5, 0.2, 0.2),
                                    logbase = exp(1), exact = TRUE),
               utility_params = list(alpha = 0.05,
                                     lower = c(lambda = 0.001,
                                               epsilon = 1,
                                               tau = 0.001),
                                      upper = c(lambda = 0.999,
                                                epsilon = 10,
                                                tau = 0.999)),
               algorithm_params = list(start = c(lambda = 0.99,
                                                    epsilon = 2,
                                                    tau = 0.5),
                                       maximization = TRUE,
                                       control = list(maxit = 30000,
                                                      temp = 2000,
                                                      REPORT = 2)))
}
